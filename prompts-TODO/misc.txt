misc.txt -- random notes / feature ideas.

CLAUDE: DO NOT IMPLEMENT FEATURES FROM THIS FILE!!

Once groomed / well-formed, move to backlog.txt.


## TODO

- simplify quick-start -- it cur has too much heavy detail / impl details. Make a more comprehensive User Manual, more spec-like / requirements.txt type thing, and see if CC can generate tests to ensure product requirements hold.

- fix bug: e2e tests make sounds. they should be silent when running.


- Ensure there is test coverage of the following:
  - when app starts, it looks like 
  - every button makes a certain noise when you click on it.
  - (almost) every tool make a certain noise when you click, drag, and release it.

  - when the app starts:
      1. it looks like kidpix/tests/kidpix-app-startup.png
      2. selected tool: pencil
      3. selected thickness: 0 (thinnest line)
      4. selected pattern: 0 (solid)


==========================================================



# Feature: write test files for the individual JS files in js/ dir.


# Feature: Migrate plain-JS files to our new React / Typescript tech stack.

The original JS implementation is in:

- js/brushes/*
- js/builders/*
- etc.

Let's see if we can get the original app ported to React. First read
CLAUDE-OLD-PROJ.md to inform your understanding of the original architecture.
Then configure our current React / Typescript project to use these old JS
files, in such a way so that I can view my existing app
(index.html -> kidpix.html -> js/app.js), but ALSO the "original" KidPix app
that is powered by the JS files in the js/ directory (except for js/app.js).

For example, one approach would be:

1. somehow configure the project to build the js/*.js files (EXCEPT FOR js/app.js, see below)
2. create a new file kidpix-orig.html that uses those js/*.js files
3. in index.html, add a new link that points to kidpix-orig.html

(Happy to hear other ideas if you have them!)





Date: 2025-06-11
Priority: Medium
Status: TODO

# Update ESLint Config and Add Tests for JS Files

## Background
After migrating from monolithic app.js to modular JS files in js/ directory, we need to:

1. Update ESLint configuration to lint the JS files (currently they're ignored via js/**/* in eslint.config.js)
2. Add testing for the JS files since they are now the primary source code

## Tasks

### ESLint Configuration
- Remove `js/**/*` from the ignores array in eslint.config.js
- Add a configuration block for JavaScript files (*.js) with appropriate rules
- Consider adding browser globals for the JS files since they use DOM APIs
- Test that linting works: `yarn lint`

### Testing Strategy
- Decide on testing approach for the legacy JS codebase:
  - Unit tests for individual tools/brushes/utilities?
  - Integration tests for canvas drawing operations?
  - Visual regression tests for drawing outputs?
- Consider test framework compatibility with the existing KiddoPaint namespace structure
- May need to refactor some JS code to be more testable (extract pure functions, reduce global state dependencies)

### Implementation Notes
- The JS files use a global KiddoPaint namespace and directly manipulate DOM/canvas
- Many functions depend on canvas context and global state
- Consider starting with utility functions (js/util/*) as they may be most testable
- Tools and brushes might need integration-style tests with actual canvas elements

## Acceptance Criteria
- [ ] JS files in js/ directory are being linted by ESLint
- [ ] No new linting errors introduced
- [ ] Basic test framework is set up for JS files
- [ ] At least a few example tests written (perhaps for utility functions)
- [ ] Documentation updated on how to run JS tests



