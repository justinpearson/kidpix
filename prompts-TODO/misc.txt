misc.txt -- random notes / feature ideas.

CLAUDE: DO NOT IMPLEMENT FEATURES FROM THIS FILE!!

Once groomed / well-formed, move to backlog.txt.


===============================================================
Bug: releases don't work, eg, kidpix-v1.0.0.zip
===============================================================

```
√ 2025-09-21 7:19:34 tmp  % cd /Users/justin/Downloads/kidpix-v1.0.0
√ 2025-09-21 15:32:02 kidpix-v1.0.0  % ls
assets    css   img   index.html  snd   static
√ 2025-09-21 15:32:02 kidpix-v1.0.0  % p3 -m http.server
Serving HTTP on :: port 8000 (http://[::]:8000/) ...
::1 - - [21/Sep/2025 15:32:14] "GET / HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] code 404, message File not found
::1 - - [21/Sep/2025 15:32:14] "GET /.well-known/appspecific/com.chrome.devtools.json HTTP/1.1" 404 -
::1 - - [21/Sep/2025 15:32:14] "GET /css/kidpix.css HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] code 404, message File not found
::1 - - [21/Sep/2025 15:32:14] "GET /kidpix/assets/main-BtFJm_MT.js HTTP/1.1" 404 -
::1 - - [21/Sep/2025 15:32:14] code 404, message File not found
::1 - - [21/Sep/2025 15:32:14] "GET /kidpix/assets/main-BwliJ-KA.css HTTP/1.1" 404 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_27.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_28.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_29.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_30.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_31.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_34.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_33.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_32.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_35.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_36.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/eyedropper-icon.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_40.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_39.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_37.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kp-m_38.png HTTP/1.1" 200 -
::1 - - [21/Sep/2025 15:32:14] "GET /img/kidpix.png HTTP/1.1" 200 -
^C
Keyboard interrupt received, exiting.
√ 2025-09-21 15:32:19 kidpix-v1.0.0  % pwd
kidpix/tmp/kidpix-v1.0.0/ or smt
```


===============================================================
Feature: ensure all tools make sounds
===============================================================


- some tools, like the eraser, don't make sounds for some reason.
- use TDD - make an e2e test that asserts that basically every click makes a noise.

Notes:

- brush tool
  - 3D subtool is too quiet, what sounds is it supposed to play? consider changing to Pencil's sounds
  - same w Connect The Dots subtool, Swirl, Rotating Dots, Inverter, The Looper

example: at kidpix.app (the prev project), 

https://kidpix.app/sndmp3/kidpix-submenu-brush-twirly.wav.mp3

...


===============================================================
Feature: Add Search Bar to Stamp
===============================================================


  - problem: in the "Stamp" tool, it's very hard to find the stamp i want. There are ~10 pages, with ~8 rows per page, with ~10 stamps per row.
  - solution: add a search bar for stamps that filters down the list of stamps. Each stamp will need to be named.
  - consider moving from "stamp sheets" to individual png files, for simplicity. If there's too many network reqs as a result, maybe there's some way to zip / bundle them at build-time.


- re-enable tests in CI workflows
- clean up yarn scripts, there's too many and they're confusing. don't even need TS ones until we are actually using TS haha. how about let's start by writing a section in the readme for "development workflow" that's oriented around when you'd actually use each yarn script as you build, test, and deploy a feature.
- delete / remove old workflows out of github
- finish migration 


- 6 kidpix "stickers" (/Users/justin/Projects/KidPix/kidpix/src/assets/img/kp-sticker-1.png) - they were some funny secret feature that we removed in aug 2025. revisit adding them back in, after we improve the stamp tool's stamp management system.


- simplify quick-start -- it cur has too much heavy detail / impl details. Make a more comprehensive User Manual, more spec-like / requirements.txt type thing, and see if CC can generate tests to ensure product requirements hold.

- fix bug: e2e tests make sounds. they should be silent when running.


- Ensure there is test coverage of the following:
  - when app starts, it looks like 
  - every button makes a certain noise when you click on it.
  - (almost) every tool make a certain noise when you click, drag, and release it.

  - when the app starts:
      1. it looks like kidpix/tests/kidpix-app-startup.png
      2. selected tool: pencil
      3. selected thickness: 0 (thinnest line)
      4. selected pattern: 0 (solid)



=============================================================
Consider what to do with modifier keys
===============================================================

  - For simplicity for small children, I feel that most of the modifier-key functionality should be removed.
  - Maybe also remove keyboard shortcuts too, see kiddopaint.js line 200 "document.onkeydown = function checkKey(e) { ..."
  - Review the code to see how modifier keys like SHIFT, CTRL, META, ALT are used.
  - but for circle, i like:
    - no modifier keys: 2 pts are opposite sides of circle
    - shift: first click is center of circle
    - ctrl: can draw ellipse, not just circle.
  - should have same for square:
    - no mod key: 2 pts are opposite corners of rect
    - shift: first click is center of rect, 2nd pt is a corner
    - ctrl: draw a square, not a rect.
      - currently, holding 'shift' achieves this. just move that logic to happen when 'ctrl' is held, not 'shift'. 
  - line: maybe we should have some mod key to snap to 45-deg angles, or smt.

  - options:
    - remove all code that checks modifiedCtrl etc -- kind of a shame to lose some of those cute features / options
    - disable all keyboard shortcuts for now, at a high level, can consider adding them back later.

  - in the future, consider adding a cute popup when you type "?", that displays the keyboard shortcuts, like how many modern web apps do it.





===============================================================
Feature: improve e2e test coverage
===============================================================


Let's write a nice suite of end-to-end tests that use Playwright.

1. For simplicity, one e2e test file (.spec.ts) per tool -- pencil.spec.ts, line.spec.ts, etc.

2. But also want to test cross-tool behavior, and that certain behavior holds for ALL tools, like:

Select the tool.
  It should become highlighted, and its sub-tools should appear.
Select a sub-tool.
  (If the tool has multiple sets of sub-tools (eg, Pencil has "size" sub-tools and "texture" sub-tools), select one sub-tool from each set.)
  The sub-tool(s) should become highlighted.
With that sub-tool selected, click in the middle of the canvas.
  There shouldn't be any console errors.
Then drag a short line in the middle of the canvas.
  There shouldn't be any console errors.
Click a different tool, then click back to the original tool.
  The original sub-tools should still be highlighted.


3. Configure playwright so that when running the tests in a automated / headless fashion:
  - no sounds play.
  - headless.
  - show test results in terminal, as text. NOT in a web browser via a (blocking) web server running in the background.

4. Let's also add some yarn scripts in package.json for running the unit / e2e tests in various ways, like:
  - generate & display code coverage
  - show last e2e test run without running all tests again
  - headed or headless
    - e2e headless tests: do NOT play sounds when they run, that is distracting


- NOTE TO SELF: It would be very cool if we had a "requirements.txt" or spec of kidpix, from which the e2e tests could be generated!!




===============================================================
simplify github actions / workflows
===============================================================


want:

- PR created / changed -> run tests
- some way to on-demand trigger a "test deployment" of a PR's code, to see if it would work in production, that would automatically get torn down when the PR is merged or closed
- deploy to production when the PR is merged




===============================================================
understand / simplify / document yarn scripts in package.json
===============================================================

prev problem:

Help me with a weird problem with my yarn scripts. Basically, the site previews correctly with `yarn preview`, it deploys correctly to Github Pages when I merge a PR on github, but when I build the production assets with `yarn build:site` and view the `dist` directory with `yarn preview:site`, the site at http://127.0.0.1:8080 doesn't look right -- it looks like a different version of the site that is based on React / TS that I was prototyping a while ago.

Here's some screenshots:

- The site appears to deploy correctly to github pages, see: `/Users/justin/Projects/KidPix/kidpix/kidpix-production.png`
- `yarn preview` runs the dev server locally, with no apparent errors: `/Users/justin/Projects/KidPix/kidpix/yarn preview.png`
- However, the dist/ directory seems wrong, here's what `yarn preview:site` looks like: `/Users/justin/Projects/KidPix/kidpix/yarn preview-site.png`


simplify yarn scripts

run dev server w/ hot-reloading


docs dev server
app dev server

build docs
build app

build then serve production site (app and docs)


run linter


tests
- unit
  - w fancy ui
  - always compute coverage report
- e2e
  - default (text output)
  - headed
  - w fancy ui
  - show report of last run



cur:

  "scripts": {
    "dev:docs": "mkdocs serve -a 127.0.0.1:8000",
    "build": "vite build",
    "docs:build": "mkdocs build --site-dir dist/docs",
    "build:site": "yarn build && yarn docs:build",
    "build:preview": "NODE_ENV=development vite build",
    "preview:site": "yarn build:preview && python3 -m http.server 8080 --directory dist",
    "dev": "vite & echo $! > .vite.pid",
    "dev-stop": "kill $(cat .vite.pid 2>/dev/null) 2>/dev/null && rm -f .vite.pid || true",
    "docs:dev:OLD": "mkdocs serve",
    "build:OLD": "tsc -b && vite build",
    "docs:build:OLD": "mkdocs build",
    "lint": "eslint",
    "format": "prettier --write .",
    "test": "vitest run",
    "test:unit": "vitest",
    "test:unit:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage",
    "test:coverage:ui": "vitest --ui --coverage",
    "test:e2e": "playwright test --reporter=line",
    "test:e2e:headed": "playwright test --headed --reporter=line",
    "test:e2e:ui": "playwright test --ui --reporter=line",
    "test:e2e:single": "playwright test tests/e2e/pencil.spec.ts --project=chromium --workers=1 --reporter=line",
    "test:e2e:showlastreport": "playwright show-report",
    "screenshot": "node scripts/screenshot-capture.js",
    "preview": "vite preview",
    "type-check": "tsc -p tsconfig.app.json --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "types:generate": "tsc --declaration --emitDeclarationOnly --outDir types/generated"
  },

old:

    "dev:app": "vite",                            // visit http://localhost:5173/kidpix/
    "dev:docs": "mkdocs serve -a 127.0.0.1:8000", // visit http://localhost:8000/
    "build": "vite build",
    "docs:build": "mkdocs build --site-dir dist/docs",
    "build:site": "yarn build && yarn docs:build",
    "preview:site": "http-server dist",            // visit http://localhost:8080/kidpix/ and /kidpix/docs/




  

===============================================================
consider: write test files for the individual JS files in js/ dir.
===============================================================

should we even bother?


===============================================================
Feature: Migrate plain-JS files to our new React / Typescript tech stack.
===============================================================

The original JS implementation is in:

- js/brushes/*
- js/builders/*
- etc.

Let's see if we can get the original app ported to React. First read
CLAUDE-OLD-PROJ.md to inform your understanding of the original architecture.
Then configure our current React / Typescript project to use these old JS
files, in such a way so that I can view my existing app
(index.html -> kidpix.html -> js/app.js), but ALSO the "original" KidPix app
that is powered by the JS files in the js/ directory (except for js/app.js).

For example, one approach would be:

1. somehow configure the project to build the js/*.js files (EXCEPT FOR js/app.js, see below)
2. create a new file kidpix-orig.html that uses those js/*.js files
3. in index.html, add a new link that points to kidpix-orig.html

(Happy to hear other ideas if you have them!)




===============================================================
Update ESLint Config and Add Tests for JS Files
===============================================================

Date: 2025-06-11
Priority: Medium
Status: TODO

## Background
After migrating from monolithic app.js to modular JS files in js/ directory, we need to:

1. Update ESLint configuration to lint the JS files (currently they're ignored via js/**/* in eslint.config.js)
2. Add testing for the JS files since they are now the primary source code

## Tasks

### ESLint Configuration
- Remove `js/**/*` from the ignores array in eslint.config.js
- Add a configuration block for JavaScript files (*.js) with appropriate rules
- Consider adding browser globals for the JS files since they use DOM APIs
- Test that linting works: `yarn lint`

### Testing Strategy
- Decide on testing approach for the legacy JS codebase:
  - Unit tests for individual tools/brushes/utilities?
  - Integration tests for canvas drawing operations?
  - Visual regression tests for drawing outputs?
- Consider test framework compatibility with the existing KiddoPaint namespace structure
- May need to refactor some JS code to be more testable (extract pure functions, reduce global state dependencies)

### Implementation Notes
- The JS files use a global KiddoPaint namespace and directly manipulate DOM/canvas
- Many functions depend on canvas context and global state
- Consider starting with utility functions (js/util/*) as they may be most testable
- Tools and brushes might need integration-style tests with actual canvas elements

## Acceptance Criteria
- [ ] JS files in js/ directory are being linted by ESLint
- [ ] No new linting errors introduced
- [ ] Basic test framework is set up for JS files
- [ ] At least a few example tests written (perhaps for utility functions)
- [ ] Documentation updated on how to run JS tests





===============================================================
Feature: Explore using "bundled asset references" instead of hardcoded asset paths.
===============================================================

After converstion to ES modules / ReactTS, use "bundled asset references" instead of hardcoded asset paths.

> tell me about using "bundled asset references"

⏺ Bundled Asset References

  This approach involves letting Vite handle asset management by importing assets into your JavaScript, rather than using hardcoded paths.

  How It Works

  Instead of hardcoded paths, you import assets as modules:

  // Traditional hardcoded approach (what you have now)
  var toolIcon = "/src/assets/img/tool-pencil.png";

  // Bundled asset reference approach
  import toolIconUrl from '/src/assets/img/tool-pencil.png';
  var toolIcon = toolIconUrl;

  Benefits

  1. Automatic path resolution - Vite handles dev vs production paths
  2. Asset optimization - Images get optimized, renamed with hashes
  3. Dead code elimination - Unused assets aren't bundled
  4. Cache busting - Hash-based filenames for better caching

  The Challenge for Your Project

  Your codebase uses modular JavaScript loaded via script tags, not ES modules with imports. This means you can't directly use import statements in your current JS
  files.

  Possible Solutions

  1. Hybrid approach: Create an asset manifest file that maps logical names to bundled URLs:
  // assets-manifest.js (generated by Vite)
  window.ASSETS = {
    'tool-pencil': '/assets/tool-pencil-abc123.png',
    'sound-pencil': '/assets/pencil-sound-def456.mp3'
  };
  2. Convert to ES modules: Migrate your script tags to use ES module imports (bigger architectural change)
  3. Asset plugin: Use a Vite plugin to generate asset URLs and inject them into your JS files at build time

  For your current architecture, relative paths (Option 2 from before) would be much simpler to implement than bundled references.

  Would you like me to search for the hardcoded paths in your JS files to see the scope of changes needed?

> ok. as you suggested, let's explore using relative paths. But I'll make a note to consider using bundled references once we finishg the migration to React/TS.



