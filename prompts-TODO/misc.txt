misc.txt -- random notes / feature ideas.

CLAUDE: DO NOT IMPLEMENT FEATURES FROM THIS FILE!!

Once groomed / well-formed, move to backlog.txt.


## TODO



- Add Search Bar to Stamp
  - problem: in the "Stamp" tool, it's very hard to find the stamp i want. There are ~10 pages, with ~8 rows per page, with ~10 stamps per row.
  - solution: add a search bar for stamps that filters down the list of stamps. Each stamp will need to be named.
  - consider moving from "stamp sheets" to individual png files, for simplicity. If there's too many network reqs as a result, maybe there's some way to zip / bundle them at build-time.


- re-enable tests in CI workflows
- clean up yarn scripts, there's too many and they're confusing. don't even need TS ones until we are actually using TS haha. how about let's start by writing a section in the readme for "development workflow" that's oriented around when you'd actually use each yarn script as you build, test, and deploy a feature.
- delete / remove old workflows out of github
- finish migration 


- 6 kidpix "stickers" (/Users/justin/Projects/KidPix/kidpix/src/assets/img/kp-sticker-1.png) - they were some funny secret feature that we removed in aug 2025. revisit adding them back in, after we improve the stamp tool's stamp management system.


- simplify quick-start -- it cur has too much heavy detail / impl details. Make a more comprehensive User Manual, more spec-like / requirements.txt type thing, and see if CC can generate tests to ensure product requirements hold.

- fix bug: e2e tests make sounds. they should be silent when running.


- Ensure there is test coverage of the following:
  - when app starts, it looks like 
  - every button makes a certain noise when you click on it.
  - (almost) every tool make a certain noise when you click, drag, and release it.

  - when the app starts:
      1. it looks like kidpix/tests/kidpix-app-startup.png
      2. selected tool: pencil
      3. selected thickness: 0 (thinnest line)
      4. selected pattern: 0 (solid)



=============================================================


- Consider what to do with modifier keys

  - For simplicity for small children, I feel that most of the modifier-key functionality should be removed.
  - Maybe also remove keyboard shortcuts too, see kiddopaint.js line 200 "document.onkeydown = function checkKey(e) { ..."
  - Review the code to see how modifier keys like SHIFT, CTRL, META, ALT are used.
  - but for circle, i like:
    - no modifier keys: 2 pts are opposite sides of circle
    - shift: first click is center of circle
    - ctrl: can draw ellipse, not just circle.
  - should have same for square:
    - no mod key: 2 pts are opposite corners of rect
    - shift: first click is center of rect, 2nd pt is a corner
    - ctrl: draw a square, not a rect.
      - currently, holding 'shift' achieves this. just move that logic to happen when 'ctrl' is held, not 'shift'. 
  - line: maybe we should have some mod key to snap to 45-deg angles, or smt.

  - options:
    - remove all code that checks modifiedCtrl etc -- kind of a shame to lose some of those cute features / options
    - disable all keyboard shortcuts for now, at a high level, can consider adding them back later.

  - in the future, consider adding a cute popup when you type "?", that displays the keyboard shortcuts, like how many modern web apps do it.


modifier key usage:


  Functions triggered by Command key (modifiedCtrl) on macOS:

  Main Uses:
  1. Secret stickers: Shows stickers submenu when Cmd+clicking Rubber Stamps
  2. Scroll wheel range: Command+scroll adjusts modifiedCtrlRange (-100 to +100)

  Drawing Effects:
  3. Pentagon brush: Uses different pentagon vs. sine wave pattern
  4. Sprite placer: 3x size multiplier when placing sprites5. Square tool: Disables stroke outline (fill only)
  6. Circle tool: Disables stroke outline (fill only)
  7. Astroid tool: Alternating colors between current and alt color
  8. 3D tool: Changes texture to speckles
  9. Texture (Stripes): Changes stripe pattern dimensions
  10. Whole canvas dither effect: Uses Bayer dithering with threshold
  11. Cut/Truck tool: Uses command range for size scaling
  12. Stamp tool: Uses command range for hue shifting



  Functions triggered by Control key (keyCode 17) on macOS:

  Brush Effects:
  - Pies brush: Adds stroke outline
  - Circles brush: Changes to random circles
  - Connect-the-dots & Twirly brushes: Uses cycling colors instead of current color
  - Pentagon brush: Uses cycling colors
  - Following Sine brush: Uses cycling colors
  - Triangles brush: Changes triangle type
  - Animal tracks brush: Changes from paw prints (🐾) to footprints (👣)
  - Spray brush: Adds transparency/alpha effects

  Drawing Tools:
  - Pencil Rainbow texture: Activates full rainbow mode
  - Circle tool: Creates perfect circles from center point (vs. ellipses from corner)
  - Astroid tool: Uses random colors for stroke
  - Scribble tool: Increases jitter from 10 to 25

  Advanced Tools:
  - Stamp tool: Modifier for stamp behavior
  - Sprite placer: Modifier for sprite placement
  - Cut/Truck tool: Disables preview mode, goes straight to cutting
  - TNT tool: Hidden feature to block completion
  - Shadow boxes mixer: Uses random colors for shadows
  - Dither effect: Changes to Atkinson dithering
  - Guilloche tool: Enables fill rectangles
  - 3D tool: Changes texture to sand
  - Looper tool: Uses random colors instead of current color


  TODO: investigate usage of shift & alt/option





====================================================


simplify github actions / workflows


want:

- PR created / changed -> run tests
- some way to on-demand trigger a "test deployment" of a PR's code, to see if it would work in production, that would automatically get torn down when the PR is merged or closed
- deploy to production when the PR is merged




===================================================

understand / simplify / document yarn scripts in package.json

prev problem:

Help me with a weird problem with my yarn scripts. Basically, the site previews correctly with `yarn preview`, it deploys correctly to Github Pages when I merge a PR on github, but when I build the production assets with `yarn build:site` and view the `dist` directory with `yarn preview:site`, the site at http://127.0.0.1:8080 doesn't look right -- it looks like a different version of the site that is based on React / TS that I was prototyping a while ago.

Here's some screenshots:

- The site appears to deploy correctly to github pages, see: `/Users/justin/Projects/KidPix/kidpix/kidpix-production.png`
- `yarn preview` runs the dev server locally, with no apparent errors: `/Users/justin/Projects/KidPix/kidpix/yarn preview.png`
- However, the dist/ directory seems wrong, here's what `yarn preview:site` looks like: `/Users/justin/Projects/KidPix/kidpix/yarn preview-site.png`


simplify yarn scripts

run dev server w/ hot-reloading


docs dev server
app dev server

build docs
build app

build then serve production site (app and docs)


run linter


tests
- unit
  - w fancy ui
  - always compute coverage report
- e2e
  - default (text output)
  - headed
  - w fancy ui
  - show report of last run








cur:

  "scripts": {
    "dev:docs": "mkdocs serve -a 127.0.0.1:8000",
    "build": "vite build",
    "docs:build": "mkdocs build --site-dir dist/docs",
    "build:site": "yarn build && yarn docs:build",
    "build:preview": "NODE_ENV=development vite build",
    "preview:site": "yarn build:preview && python3 -m http.server 8080 --directory dist",
    "dev": "vite & echo $! > .vite.pid",
    "dev-stop": "kill $(cat .vite.pid 2>/dev/null) 2>/dev/null && rm -f .vite.pid || true",
    "docs:dev:OLD": "mkdocs serve",
    "build:OLD": "tsc -b && vite build",
    "docs:build:OLD": "mkdocs build",
    "lint": "eslint",
    "format": "prettier --write .",
    "test": "vitest run",
    "test:unit": "vitest",
    "test:unit:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage",
    "test:coverage:ui": "vitest --ui --coverage",
    "test:e2e": "playwright test --reporter=line",
    "test:e2e:headed": "playwright test --headed --reporter=line",
    "test:e2e:ui": "playwright test --ui --reporter=line",
    "test:e2e:single": "playwright test tests/e2e/pencil.spec.ts --project=chromium --workers=1 --reporter=line",
    "test:e2e:showlastreport": "playwright show-report",
    "screenshot": "node scripts/screenshot-capture.js",
    "preview": "vite preview",
    "type-check": "tsc -p tsconfig.app.json --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "types:generate": "tsc --declaration --emitDeclarationOnly --outDir types/generated"
  },

old:

    "dev:app": "vite",                            // visit http://localhost:5173/kidpix/
    "dev:docs": "mkdocs serve -a 127.0.0.1:8000", // visit http://localhost:8000/
    "build": "vite build",
    "docs:build": "mkdocs build --site-dir dist/docs",
    "build:site": "yarn build && yarn docs:build",
    "preview:site": "http-server dist",            // visit http://localhost:8080/kidpix/ and /kidpix/docs/




  

==========================================================



# Feature: write test files for the individual JS files in js/ dir.


# Feature: Migrate plain-JS files to our new React / Typescript tech stack.

The original JS implementation is in:

- js/brushes/*
- js/builders/*
- etc.

Let's see if we can get the original app ported to React. First read
CLAUDE-OLD-PROJ.md to inform your understanding of the original architecture.
Then configure our current React / Typescript project to use these old JS
files, in such a way so that I can view my existing app
(index.html -> kidpix.html -> js/app.js), but ALSO the "original" KidPix app
that is powered by the JS files in the js/ directory (except for js/app.js).

For example, one approach would be:

1. somehow configure the project to build the js/*.js files (EXCEPT FOR js/app.js, see below)
2. create a new file kidpix-orig.html that uses those js/*.js files
3. in index.html, add a new link that points to kidpix-orig.html

(Happy to hear other ideas if you have them!)





Date: 2025-06-11
Priority: Medium
Status: TODO

# Update ESLint Config and Add Tests for JS Files

## Background
After migrating from monolithic app.js to modular JS files in js/ directory, we need to:

1. Update ESLint configuration to lint the JS files (currently they're ignored via js/**/* in eslint.config.js)
2. Add testing for the JS files since they are now the primary source code

## Tasks

### ESLint Configuration
- Remove `js/**/*` from the ignores array in eslint.config.js
- Add a configuration block for JavaScript files (*.js) with appropriate rules
- Consider adding browser globals for the JS files since they use DOM APIs
- Test that linting works: `yarn lint`

### Testing Strategy
- Decide on testing approach for the legacy JS codebase:
  - Unit tests for individual tools/brushes/utilities?
  - Integration tests for canvas drawing operations?
  - Visual regression tests for drawing outputs?
- Consider test framework compatibility with the existing KiddoPaint namespace structure
- May need to refactor some JS code to be more testable (extract pure functions, reduce global state dependencies)

### Implementation Notes
- The JS files use a global KiddoPaint namespace and directly manipulate DOM/canvas
- Many functions depend on canvas context and global state
- Consider starting with utility functions (js/util/*) as they may be most testable
- Tools and brushes might need integration-style tests with actual canvas elements

## Acceptance Criteria
- [ ] JS files in js/ directory are being linted by ESLint
- [ ] No new linting errors introduced
- [ ] Basic test framework is set up for JS files
- [ ] At least a few example tests written (perhaps for utility functions)
- [ ] Documentation updated on how to run JS tests



